// checksum 0xc01f version 0x90005
/*
  This file was generated by the Qt Quick 2 Application wizard of Qt Creator.
  QtQuick2ApplicationViewer is a convenience class containing mobile device specific
  code such as screen orientation handling. Also QML paths and debugging are
  handled here.
  It is recommended not to modify this file, since newer versions of Qt Creator
  may offer an updated version of it.
*/

#include "qtquick2applicationviewer.h"

#include <QtCore/QCoreApplication>
#include <QtCore/QDir>
#include <QtQml/QQmlEngine>
#include <QQuickView>
#include <QQmlContext>
#include <QDateTime>
#include <QQmlEngine>
#include <QQmlComponent>
//#include <QtDeclarative/QDeclarativeEngine>
//#include <QtDeclarative/QDeclarativeComponent>
//#include <QtDeclarative/QDeclarativeItem>
#include <QTimer>
#include <QtMultimedia/QMediaPlaylist>


//------------------------------------------------------------------------------------------
class QtQuick2ApplicationViewerPrivate
{
    QString mainQmlFile;
    friend class QtQuick2ApplicationViewer;
    static QString adjustPath(const QString &path);
};

//------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------



//------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------

QString QtQuick2ApplicationViewerPrivate::adjustPath(const QString &path)
{
#if defined(Q_OS_IOS)
    if (!QDir::isAbsolutePath(path))
        return QString::fromLatin1("%1/%2")
                .arg(QCoreApplication::applicationDirPath(), path);
#elif defined(Q_OS_MAC)
    if (!QDir::isAbsolutePath(path))
        return QString::fromLatin1("%1/../Resources/%2")
                .arg(QCoreApplication::applicationDirPath(), path);
#elif defined(Q_OS_BLACKBERRY)
    if (!QDir::isAbsolutePath(path))
        return QString::fromLatin1("app/native/%1").arg(path);
#elif !defined(Q_OS_ANDROID)
    QString pathInInstallDir =
            QString::fromLatin1("%1/../%2").arg(QCoreApplication::applicationDirPath(), path);
    if (QFileInfo(pathInInstallDir).exists())
        return pathInInstallDir;
    pathInInstallDir =
            QString::fromLatin1("%1/%2").arg(QCoreApplication::applicationDirPath(), path);
    if (QFileInfo(pathInInstallDir).exists())
        return pathInInstallDir;
#elif defined(Q_OS_ANDROID_NO_SDK)
    return QLatin1String("/data/user/qt/") + path;
#endif
    return path;
}

//------------------------------------------------------------------------------------------

QtQuick2ApplicationViewer::QtQuick2ApplicationViewer(QWindow *parent)
    : QQuickView(parent)
    , d(new QtQuick2ApplicationViewerPrivate())
{
    connect(engine(), SIGNAL(quit()), SLOT(close()));
    setResizeMode(QQuickView::SizeRootObjectToView);

    m_distance=0;
}

//------------------------------------------------------------------------------------------

void QtQuick2ApplicationViewer::setMainView()//(QQuickView *v)
{
    // the main game window
    mainObject = this->rootObject();
    mainItem = qobject_cast<QQuickItem*>(mainObject);

    //the space ship
    spaceShip = mainItem->findChild<QQuickItem*>("spaceShip");

    //the button for testing
    QQuickItem *toolBar = mainItem->findChild<QQuickItem*>("btn_test2");
    if (toolBar)
        QObject::connect(toolBar, SIGNAL(qmlSignal(QString)),this, SLOT(cppSlot(QString)));

    QObject::connect(mainItem, SIGNAL(qmlSignal2(QVariant)),this, SLOT(cppSlot2(QVariant)));

    // testing
    mainItem->setWidth(mainItem->width());
    //access the child
    QQuickItem *toolBar2 = mainItem->findChild<QQuickItem*>("tool_bar");
    if (toolBar2)
        toolBar2->setProperty("color", "grey");

    QQuickItem *scoreRect = toolBar2->findChild<QQuickItem*>("distance_rect");
    if (scoreRect)
        scoreRect->setProperty("color", toolBar2->property("color").toString());

    while (meteorList.size()<11)
    {
        createMeteor();
    }
    //for(int i=0;i<11;i++)
    //    createMeteor();

    thread=new ThreadTest;
    QObject::connect(thread, SIGNAL(updateInterface()),this, SLOT(gameLoop()));
    thread->start();

        //QUrl* urlQml=new QUrl("/audio/666ways-03-intro-solo.mp3");
        //player->setMedia(*urlQml);

    //play the audio file
    /*weaponBoom= new QSound("qrc:///audio/audio/blast.au");
    weaponBoom->play();
    QSound::play("/Users/anthony/qt_code/SpaceSheepMobile/audio/move.wav");
    //QSound::play("../audio/bgaudio_mono.au");*/
    weaponBoom=new QSoundEffect;
    weaponBoom->setSource(QUrl("qrc:///audio/audio/Baah.wav"));
    weaponBoom->play();

   /* palylist=new QMediaPlaylist;
    palylist->addMedia(QUrl("qrc:///audio/audio/Baah.wav"));
    palylist->setPlaybackMode(QMediaPlaylist::Loop);
    player = new QMediaPlayer;
    //player->setMedia((QUrl(QLatin1String("assets:/")+"audio/666ways-03-intro-solo.mp3")));
    //player->setMedia(QUrl("qrc:///audio/audio/Baah.wav"));
    player->setVolume(100);
    player->setPlaylist(palylist);
    player->play();*/

    if (mainItem)
        QMetaObject::invokeMethod(mainItem, "startAnimations");
}

//------------------------------------------------------------------------------------------

QString QtQuick2ApplicationViewer::getDevice()
{
    return Global::device();
}

//------------------------------------------------------------------------------------------
// create a new meteor
void QtQuick2ApplicationViewer::createMeteor()
{
    //QQmlEngine engine;
    //QString firstUrl=QStringLiteral("/qml/SpaceSheepMobile/Meteor.qml");
    //QString secondUrl=QtQuick2ApplicationViewerPrivate::adjustPath(firstUrl);
    //QUrl finalUrl = (QUrl(QLatin1String("assets:/")+"qml/SpaceSheepMobile/Meteor.qml"));

    //QUrl finalUrl = QUrl(QtQuick2ApplicationViewerPrivate::adjustPath("qml/SpaceSheepMobile/Meteor.qml"));
    QUrl finalUrl = QUrl("qrc:///qml/SpaceSheepMobile/Meteor.qml");
    //qDebug() <<"*-*-*-*meteor: "<< finalUrl;

    //QQmlComponent component(engine(),QUrl::fromLocalFile("assets:/qml/SpaceSheepMobile/Meteor.qml"));
    QQmlComponent component(engine(),finalUrl);
    if(component.isReady())
    {
        QObject *myObject = component.create();
        QQuickItem *item = qobject_cast<QQuickItem*>(myObject);
        //item->setX(GenerateRandom(mainItem->width() - mainItem->property("metDim").toDouble()));
        item->setParentItem(mainItem);

        // add the new created meteor to the list
        meteorList.append(item);
    }
}

//------------------------------------------------------------------------------------------

QtQuick2ApplicationViewer::~QtQuick2ApplicationViewer()
{
    delete d;
}

//------------------------------------------------------------------------------------------

void QtQuick2ApplicationViewer::setMainQmlFile(const QString &file)
{
    d->mainQmlFile = "qrc:///qml/SpaceSheepMobile/main.qml";
    setSource(QUrl("qrc:///qml/SpaceSheepMobile/main.qml"));
    return;

    d->mainQmlFile = QtQuick2ApplicationViewerPrivate::adjustPath(file);
#if defined(Q_OS_ANDROID) && !defined(Q_OS_ANDROID_NO_SDK)
    setSource(QUrl(QLatin1String("assets:/")+d->mainQmlFile));
#else
    setSource(QUrl::fromLocalFile(d->mainQmlFile));
#endif
}

void QtQuick2ApplicationViewer::addImportPath(const QString &path)
{
    engine()->addImportPath(QtQuick2ApplicationViewerPrivate::adjustPath(path));
}

void QtQuick2ApplicationViewer::showExpanded()
{
#if defined(Q_WS_SIMULATOR) || defined(Q_OS_QNX)
    showFullScreen();
#else
    show();
#endif
}

//------------------------------------------------------------------------------------------

void QtQuick2ApplicationViewer::setTheTime()
{
    this->rootContext()->setContextProperty("currentDateTime", QDateTime::currentDateTime());
    this->show();
    emit(dataChanged());

    InvocQmlFunctions();
}

//------------------------------------------------------------------------------------------

void QtQuick2ApplicationViewer::testMethod(const QString &msg)
{
     qDebug() << "TestMethod Called the C++ method with" << msg;
}

//------------------------------------------------------------------------------------------

// 2ways to set a property
void QtQuick2ApplicationViewer::propertyFromCpp()
{
    qDebug() << "Property value:" << QQmlProperty::read(mainItem, "someNumber").toInt();
    QQmlProperty::write(mainItem, "someNumber", 5000);
    qDebug() << "Property value:" << mainItem->property("someNumber").toInt();

    mainItem->setProperty("someNumber", 100);
    qDebug() << "Property value:" << mainItem->property("someNumber").toInt();
}

//------------------------------------------------------------------------------------------

void QtQuick2ApplicationViewer::testMethod2()
{
    //item->setWidth(400);
    //access the child
    QQuickItem *toolBar = mainItem->findChild<QQuickItem*>("tool_bar");
    if (toolBar)
    {
        toolBar->setProperty("color", "red");
    }
    //delete object;
}

//------------------------------------------------------------------------------------------

void QtQuick2ApplicationViewer::InvocQmlFunctions()
{
    QQuickItem *item = mainItem->findChild<QQuickItem*>("functionItem");
    if (item)
    {
        QVariant returnedValue;
        QVariant msg = "Hello from C++";
        QMetaObject::invokeMethod(item, "myQmlFunction",
                                  Q_RETURN_ARG(QVariant, returnedValue),
                                  Q_ARG(QVariant, msg));

        qDebug() << "QML function returned:" << returnedValue.toString();
        //delete object;
    }
}

//------------------------------------------------------------------------------------------

void QtQuick2ApplicationViewer::cppSlot2(const QVariant &v)
{
       qDebug() << "Called the C++ slot with value:" << v;

       QQuickItem *item = qobject_cast<QQuickItem*>(v.value<QObject*>());
       qDebug() << "Item dimensions:" << item->width() << item->height();
}

//------------------------------------------------------------------------------------------

void QtQuick2ApplicationViewer::gameLoop()
{
    setDistanceTraveled(distanceTraveled()+10);

    if(distanceTraveled() % 10000 == 0)
    {
        if(Global::startTimeoutThread-(Global::difficultylevel*1000)>0)
            Global::difficultylevel=Global::difficultylevel+1;
    }

    int totalMeteors=meteorList.length();
    for(int i=0;i<totalMeteors;i++)
    {
        QQuickItem *meteor=meteorList.takeFirst();
        qreal yPos=meteor->y();

        if(! meteor->property("isActive").toBool())
        {
            //initialize starting position
            QVariant xV=qVariantFromValue<qreal>(mainItem->width()-meteor->findChild<QQuickItem*>("meteor_rectangle")->width());
            QMetaObject::invokeMethod(meteor, "createMeteor",Q_ARG(QVariant, xV));
        }
        else
        {
            //move the meteor down
            meteor->setY(meteor->property("meteorSpeed").toInt()+yPos);
            meteor->setZ(7);

            //detect collision with the ship
            if(
                    meteor->x()+100 > spaceShip->x() &&
                    meteor->x()+100 < spaceShip->x()+spaceShip->width() &&
                    meteor->x()+meteor->width()-100 > spaceShip->x() &&
                    meteor->x()+meteor->width()-100 < spaceShip->x()+spaceShip->width() &&
                    meteor->y()+meteor->height()-100>=spaceShip->y() &&
                    meteor->y()+100 < spaceShip->y()+spaceShip->height())
            {
                weaponBoom->play();
                QMetaObject::invokeMethod(meteor, "explode");
                //qDebug() << "booooooooooooooooooooooom    "<<meteor->y()+meteor->height()<<"   "<<spaceShip->y();
            }

            //detect collision with bullet
            int totalBullets=bulletList.length();
            for(int i=0;i<totalBullets;i++)
            {
                Bullet *bullet=bulletList.takeFirst();
                if(bullet->opacity()==1)
                {
                    if(bullet->collision(meteor->x(),meteor->y()+10,meteor->width()-100,meteor->height()-100))
                    {
                        //weaponBoom->play();
                        QMetaObject::invokeMethod(meteor, "explode");
                        bullet->setOpacity(0);
                        setScoreHero(scoreHero()+(11*(Global::difficultylevel+11)));
                    }
                }

                bulletList.append(bullet);
            }
        }

        //QQuickItem *meteorRect=meteor->findChild<QQuickItem*>("meteor_rectangle");
        if(yPos > mainItem->height() - mainItem->findChild<QQuickItem*>("tool_bar")->height() - 111)
        {
            //qDebug()<<"regenerate ";
            meteor->setOpacity(0);
            meteor->setProperty("isActive",false);

            //the meteor is down, decrease the score
            //must do this from qml because it decreases too much while the meteor is creating
            //or set a bool when the meteor already is already counted
            setScoreHero(scoreHero()-(11/(Global::difficultylevel+1)));
        }


        meteorList.append(meteor);
    }
}

//------------------------------------------------------------------------------------------
//random generator from javascript
qreal QtQuick2ApplicationViewer::GenerateRandom(qreal x)
{
    /*QTime midnight(0, 0, 0);
    qsrand(midnight.secsTo(QTime::currentTime()));
    double dVal=qrand();
    int xPosI=((int)dVal % (int)x);
    return (qreal)xPosI;*/

    QVariant xV=qVariantFromValue<qreal>(x);
    QVariant returnedValue;
    QMetaObject::invokeMethod(mainItem, "generateRandomX",
                              Q_RETURN_ARG(QVariant, returnedValue),
                                           Q_ARG(QVariant, xV));
    return returnedValue.toDouble();
}

qreal QtQuick2ApplicationViewer::GenerateRandom()
{
    QVariant returnedValue;
    QMetaObject::invokeMethod(mainItem, "generateRandom",
                              Q_RETURN_ARG(QVariant, returnedValue));
    return returnedValue.toDouble();
}

//------------------------------------------------------------------------------------------

void QtQuick2ApplicationViewer::shootBullet()
{
    if(bulletList.length()<11)
    {
        Bullet *b=new Bullet(this,spaceShip->x()-10,spaceShip->y()-spaceShip->height());
        bulletList.append(b);
    }
    else
    {
        // take the bullet from the list if available and visible
        Bullet *b=bulletList.takeFirst();
        b->reshoot(spaceShip->x()-10,spaceShip->y()-spaceShip->height());
        bulletList.append(b);
    }
}

//------------------------------------------------------------------------------------------

QString QtQuick2ApplicationViewer::stopThread()
{
    //QTest::qSleep( 3000 );
    qDebug()<<"stopThread";
    //try to close the thread 10 times, if after 10 it doesnt close force to kill it
    int t_count=10;
    while(thread->isRunning() && --t_count>=0)
    {
        qDebug()<<"isrunning "<<thread->isRunning();
        qDebug()<<"isFinished "<<thread->isFinished();
        thread->exit();
        //thread->quit();
        //thread->terminate();
        QTest::qSleep(11);
    }
    if(thread->isRunning())
        thread->terminate();

    qDebug()<<"at the end isrunning "<<thread->isRunning();
    qDebug()<<"isFinished "<<thread->isFinished();
    return "ok";
}

/*void QtQuick2ApplicationViewer::increaseScore()
{
    ++Global::score;
}*/

